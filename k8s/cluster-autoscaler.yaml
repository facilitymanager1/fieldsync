# Cluster Autoscaler for Node-level Scaling
# This configuration enables automatic node provisioning based on pod resource requirements

# Service Account for Cluster Autoscaler
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-autoscaler
  namespace: kube-system
  labels:
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
automountServiceAccountToken: true

---
# ClusterRole for Cluster Autoscaler
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-autoscaler
  labels:
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
rules:
- apiGroups: [""]
  resources: ["events", "endpoints"]
  verbs: ["create", "patch"]
- apiGroups: [""]
  resources: ["pods/eviction"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["pods/status"]
  verbs: ["update"]
- apiGroups: [""]
  resources: ["endpoints"]
  resourceNames: ["cluster-autoscaler"]
  verbs: ["get", "update"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["watch", "list", "get", "update"]
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "persistentvolumeclaims", "persistentvolumes"]
  verbs: ["watch", "list", "get"]
- apiGroups: ["extensions"]
  resources: ["replicasets", "daemonsets"]
  verbs: ["watch", "list", "get"]
- apiGroups: ["policy"]
  resources: ["poddisruptionbudgets"]
  verbs: ["watch", "list"]
- apiGroups: ["apps"]
  resources: ["statefulsets", "replicasets", "daemonsets"]
  verbs: ["watch", "list", "get"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses", "csinodes", "csidrivers", "csistoragecapacities"]
  verbs: ["watch", "list", "get"]
- apiGroups: ["batch", "extensions"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch", "patch"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["create"]
- apiGroups: ["coordination.k8s.io"]
  resourceNames: ["cluster-autoscaler"]
  resources: ["leases"]
  verbs: ["get", "update"]

---
# ClusterRoleBinding for Cluster Autoscaler
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-autoscaler
  labels:
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-autoscaler
subjects:
- kind: ServiceAccount
  name: cluster-autoscaler
  namespace: kube-system

---
# Role for Cluster Autoscaler
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cluster-autoscaler
  namespace: kube-system
  labels:
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["cluster-autoscaler-status", "cluster-autoscaler-priority-expander"]
  verbs: ["delete", "get", "update", "watch"]

---
# RoleBinding for Cluster Autoscaler
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cluster-autoscaler
  namespace: kube-system
  labels:
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cluster-autoscaler
subjects:
- kind: ServiceAccount
  name: cluster-autoscaler
  namespace: kube-system

---
# Cluster Autoscaler Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-autoscaler
  namespace: kube-system
  labels:
    app: cluster-autoscaler
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cluster-autoscaler
  template:
    metadata:
      labels:
        app: cluster-autoscaler
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '8085'
        cluster-autoscaler.kubernetes.io/safe-to-evict: 'false'
    spec:
      priorityClassName: system-cluster-critical
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      serviceAccountName: cluster-autoscaler
      containers:
      - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.21.0  # Update to match your Kubernetes version
        name: cluster-autoscaler
        resources:
          limits:
            cpu: 100m
            memory: 600Mi
          requests:
            cpu: 100m
            memory: 600Mi
        command:
        - ./cluster-autoscaler
        - --v=2
        - --stderrthreshold=info
        - --cloud-provider=aws  # Change to your cloud provider (aws, gce, azure)
        - --skip-nodes-with-local-storage=false
        - --expander=least-waste
        - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/fieldsync-cluster
        - --balance-similar-node-groups
        - --scale-down-enabled=true
        - --scale-down-delay-after-add=10m
        - --scale-down-unneeded-time=10m
        - --scale-down-utilization-threshold=0.5
        - --skip-nodes-with-system-pods=false
        - --max-node-provision-time=15m
        env:
        - name: AWS_REGION
          value: us-east-1  # Update to your region
        volumeMounts:
        - name: ssl-certs
          mountPath: /etc/ssl/certs/ca-certificates.crt
          readOnly: true
        imagePullPolicy: "Always"
      volumes:
      - name: ssl-certs
        hostPath:
          path: "/etc/ssl/certs/ca-bundle.crt"
      nodeSelector:
        kubernetes.io/os: linux

---
# Cluster Autoscaler Configuration for Multiple Cloud Providers

# AWS EKS Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-autoscaler-aws-config
  namespace: kube-system
  labels:
    app: cluster-autoscaler
    cloud-provider: aws
data:
  aws-config.yaml: |
    # AWS Auto Scaling Group configuration
    autoDiscovery:
      clusterName: fieldsync-cluster
      tags:
        - k8s.io/cluster-autoscaler/enabled
        - k8s.io/cluster-autoscaler/fieldsync-cluster
    
    nodeGroups:
      - name: fieldsync-workers
        minSize: 3
        maxSize: 10
        desiredCapacity: 3
        instanceType: t3.medium
        subnets:
          - subnet-xxxxxxxx
          - subnet-yyyyyyyy
        tags:
          Environment: production
          Application: fieldsync
      
      - name: fieldsync-spot-workers
        minSize: 0
        maxSize: 5
        desiredCapacity: 0
        instanceType: t3.medium
        spotPrice: "0.05"
        subnets:
          - subnet-xxxxxxxx
          - subnet-yyyyyyyy
        tags:
          Environment: production
          Application: fieldsync
          NodeType: spot

---
# GCP GKE Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-autoscaler-gcp-config
  namespace: kube-system
  labels:
    app: cluster-autoscaler
    cloud-provider: gcp
data:
  gcp-config.yaml: |
    # GKE Node Pool configuration
    project: your-gcp-project
    zone: us-central1-a
    clusterName: fieldsync-cluster
    
    nodePools:
      - name: fieldsync-pool
        minNodeCount: 3
        maxNodeCount: 10
        machineType: n1-standard-2
        diskSizeGb: 50
        diskType: pd-ssd
        preemptible: false
        labels:
          environment: production
          application: fieldsync
      
      - name: fieldsync-preemptible-pool
        minNodeCount: 0
        maxNodeCount: 5
        machineType: n1-standard-2
        diskSizeGb: 50
        diskType: pd-standard
        preemptible: true
        labels:
          environment: production
          application: fieldsync
          node-type: preemptible

---
# Azure AKS Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-autoscaler-azure-config
  namespace: kube-system
  labels:
    app: cluster-autoscaler
    cloud-provider: azure
data:
  azure-config.yaml: |
    # AKS Node Pool configuration
    resourceGroup: fieldsync-infrastructure
    subscriptionID: your-subscription-id
    tenantID: your-tenant-id
    aadClientID: your-client-id
    aadClientSecret: your-client-secret
    clusterName: fieldsync-cluster
    location: eastus
    
    nodePools:
      - name: fieldsyncpool
        minCount: 3
        maxCount: 10
        vmSize: Standard_D2s_v3
        osDiskSizeGB: 50
        osDiskType: Premium_LRS
        enableAutoScaling: true
        tags:
          Environment: production
          Application: fieldsync
      
      - name: spotpool
        minCount: 0
        maxCount: 5
        vmSize: Standard_D2s_v3
        osDiskSizeGB: 50
        osDiskType: Standard_LRS
        enableAutoScaling: true
        priority: Spot
        evictionPolicy: Delete
        spotMaxPrice: 0.05
        tags:
          Environment: production
          Application: fieldsync
          NodeType: spot

---
# Vertical Pod Autoscaler for Cluster Autoscaler
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: cluster-autoscaler-vpa
  namespace: kube-system
  labels:
    app: cluster-autoscaler
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: cluster-autoscaler
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: cluster-autoscaler
      minAllowed:
        cpu: "50m"
        memory: "256Mi"
      maxAllowed:
        cpu: "500m"
        memory: "1Gi"
      controlledResources: ["cpu", "memory"]

---
# Pod Disruption Budget for Cluster Autoscaler
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cluster-autoscaler-pdb
  namespace: kube-system
  labels:
    app: cluster-autoscaler
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: cluster-autoscaler

---
# Node Pool Configurations for Different Workloads
apiVersion: v1
kind: ConfigMap
metadata:
  name: node-pool-configurations
  namespace: fieldsync
  labels:
    app: fieldsync
    component: node-pools
data:
  general-purpose.yaml: |
    # General purpose nodes for web application
    nodePool:
      name: general-purpose
      minNodes: 3
      maxNodes: 10
      instanceType: t3.medium  # AWS
      machineType: n1-standard-2  # GCP
      vmSize: Standard_D2s_v3  # Azure
      nodeLabels:
        workload-type: general
        node-pool: general-purpose
      nodeTaints: []
      
  compute-optimized.yaml: |
    # Compute optimized nodes for CPU intensive tasks
    nodePool:
      name: compute-optimized
      minNodes: 0
      maxNodes: 5
      instanceType: c5.large  # AWS
      machineType: c2-standard-4  # GCP
      vmSize: Standard_F4s_v2  # Azure
      nodeLabels:
        workload-type: compute-intensive
        node-pool: compute-optimized
      nodeTaints:
      - key: workload-type
        value: compute-intensive
        effect: NoSchedule
        
  memory-optimized.yaml: |
    # Memory optimized nodes for memory intensive tasks
    nodePool:
      name: memory-optimized
      minNodes: 0
      maxNodes: 3
      instanceType: r5.large  # AWS
      machineType: n1-highmem-2  # GCP
      vmSize: Standard_E4s_v3  # Azure
      nodeLabels:
        workload-type: memory-intensive
        node-pool: memory-optimized
      nodeTaints:
      - key: workload-type
        value: memory-intensive
        effect: NoSchedule
        
  spot-instances.yaml: |
    # Spot/Preemptible instances for cost optimization
    nodePool:
      name: spot-instances
      minNodes: 0
      maxNodes: 8
      instanceType: t3.medium  # AWS
      machineType: n1-standard-2  # GCP
      vmSize: Standard_D2s_v3  # Azure
      spotPrice: "0.05"  # AWS
      preemptible: true  # GCP
      priority: Spot  # Azure
      nodeLabels:
        workload-type: batch
        node-pool: spot-instances
        cost-optimization: enabled
      nodeTaints:
      - key: node-type
        value: spot
        effect: NoSchedule

---
# Node Affinity Rules for Application Pods
apiVersion: v1
kind: ConfigMap
metadata:
  name: node-affinity-rules
  namespace: fieldsync
  labels:
    app: fieldsync
    component: scheduling
data:
  application-affinity.yaml: |
    # Node affinity for main application pods
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: workload-type
              operator: In
              values: ["general"]
            - key: kubernetes.io/os
              operator: In
              values: ["linux"]
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          preference:
            matchExpressions:
            - key: node-pool
              operator: In
              values: ["general-purpose"]
              
  database-affinity.yaml: |
    # Node affinity for database pods
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: workload-type
              operator: In
              values: ["general", "memory-intensive"]
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          preference:
            matchExpressions:
            - key: node-pool
              operator: In
              values: ["memory-optimized"]
              
  batch-jobs-affinity.yaml: |
    # Node affinity for batch processing jobs
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          preference:
            matchExpressions:
            - key: node-pool
              operator: In
              values: ["spot-instances"]
    tolerations:
    - key: node-type
      operator: Equal
      value: spot
      effect: NoSchedule