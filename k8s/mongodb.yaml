apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: fieldsync
  labels:
    app: fieldsync
    component: mongodb
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd  # Adjust based on your cluster's storage classes

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init
  namespace: fieldsync
  labels:
    app: fieldsync
    component: mongodb
data:
  mongo-init.js: |
    db = db.getSiblingDB('fieldsync');

    db.createUser({
      user: 'fieldsync_app',
      pwd: 'fieldsync_app_password_123',
      roles: [
        {
          role: 'readWrite',
          db: 'fieldsync'
        }
      ]
    });

    print('FieldSync database user created successfully');

    // Create collections with validation
    db.createCollection('users', {
      validator: {
        $jsonSchema: {
          bsonType: 'object',
          required: ['email', 'role', 'isActive'],
          properties: {
            email: {
              bsonType: 'string',
              pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'
            },
            role: {
              bsonType: 'string',
              enum: ['admin', 'supervisor', 'fieldtech', 'sitestaff', 'client']
            },
            isActive: {
              bsonType: 'bool'
            }
          }
        }
      }
    });

    // Create initial indexes
    db.users.createIndex({ email: 1 }, { unique: true });
    db.users.createIndex({ role: 1, isActive: 1 });

    // Insert default admin user
    db.users.insertOne({
      email: 'admin@fieldsync.com',
      password: '$2b$10$8C8KvM5Q5dNjR7vGm.AXXeY1Vh.HY8U.zP2bVKnE1DQJ8M.U4K8Ue',
      role: 'admin',
      isActive: true,
      profile: {
        firstName: 'System',
        lastName: 'Administrator',
        department: 'IT',
        designation: 'System Admin'
      },
      createdAt: new Date(),
      lastLogin: null
    });

    print('Default admin user created');

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: fieldsync-mongodb
  namespace: fieldsync
  labels:
    app: fieldsync
    component: mongodb
spec:
  serviceName: fieldsync-mongodb
  replicas: 1
  selector:
    matchLabels:
      app: fieldsync
      component: mongodb
  template:
    metadata:
      labels:
        app: fieldsync
        component: mongodb
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      containers:
      - name: mongodb
        image: mongo:6.0
        ports:
        - containerPort: 27017
          name: mongodb
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: fieldsync-secrets
              key: MONGO_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fieldsync-secrets
              key: MONGO_ROOT_PASSWORD
        - name: MONGO_INITDB_DATABASE
          valueFrom:
            secretKeyRef:
              name: fieldsync-secrets
              key: MONGO_DATABASE
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-init
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: mongodb-init
        configMap:
          name: mongodb-init
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
      storageClassName: fast-ssd

---
apiVersion: v1
kind: Service
metadata:
  name: fieldsync-mongodb
  namespace: fieldsync
  labels:
    app: fieldsync
    component: mongodb
spec:
  type: ClusterIP
  selector:
    app: fieldsync
    component: mongodb
  ports:
  - port: 27017
    targetPort: 27017
    name: mongodb

---
# MongoDB Monitoring Service for Prometheus
apiVersion: v1
kind: Service
metadata:
  name: fieldsync-mongodb-metrics
  namespace: fieldsync
  labels:
    app: fieldsync
    component: mongodb
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9216"
spec:
  type: ClusterIP
  selector:
    app: fieldsync
    component: mongodb-exporter
  ports:
  - port: 9216
    targetPort: 9216
    name: metrics

---
# MongoDB Exporter for Prometheus metrics
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-exporter
  namespace: fieldsync
  labels:
    app: fieldsync
    component: mongodb-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fieldsync
      component: mongodb-exporter
  template:
    metadata:
      labels:
        app: fieldsync
        component: mongodb-exporter
    spec:
      containers:
      - name: mongodb-exporter
        image: percona/mongodb_exporter:0.37
        ports:
        - containerPort: 9216
          name: metrics
        env:
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: mongodb-connection
              key: MONGODB_URI
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"