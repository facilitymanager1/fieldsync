# Prometheus Stack for FieldSync Application Monitoring
# This configuration deploys Prometheus, Grafana, and AlertManager

# Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: fieldsync
  labels:
    app: fieldsync
    component: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      scrape_timeout: 10s
      evaluation_interval: 15s
      external_labels:
        cluster: 'fieldsync-production'
        environment: 'production'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      # FieldSync API metrics
      - job_name: 'fieldsync-api'
        static_configs:
          - targets:
            - 'fieldsync-backend:3000'
        metrics_path: '/metrics'
        scrape_interval: 10s
        relabel_configs:
          - source_labels: [__address__]
            target_label: __param_target
          - source_labels: [__param_target]
            target_label: instance
          - target_label: __address__
            replacement: fieldsync-backend:3000

      # FieldSync Mobile API metrics (if deployed separately)
      - job_name: 'fieldsync-mobile-api'
        static_configs:
          - targets:
            - 'fieldsync-mobile-backend:3001'
        metrics_path: '/metrics'
        scrape_interval: 10s

      # Node Exporter for system metrics
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - fieldsync
        relabel_configs:
          - source_labels: [__meta_kubernetes_endpoints_name]
            action: keep
            regex: node-exporter
          - source_labels: [__meta_kubernetes_endpoint_address_target_name]
            target_label: node
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod

      # MongoDB Exporter
      - job_name: 'mongodb-exporter'
        static_configs:
          - targets:
            - 'mongodb-exporter:9216'
        scrape_interval: 30s

      # Redis Exporter
      - job_name: 'redis-exporter'
        static_configs:
          - targets:
            - 'redis-exporter:9121'
        scrape_interval: 30s

      # Nginx Exporter (if using Nginx as reverse proxy)
      - job_name: 'nginx-exporter'
        static_configs:
          - targets:
            - 'nginx-exporter:9113'
        scrape_interval: 30s

      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - default
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      # Kubernetes Nodes
      - job_name: 'kubernetes-nodes'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics

      # Kubernetes Pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - fieldsync
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

  alert_rules.yml: |
    groups:
      - name: fieldsync_api
        rules:
          - alert: HighErrorRate
            expr: (rate(fieldsync_http_requests_total{status_code=~"5.."}[5m]) / rate(fieldsync_http_requests_total[5m])) * 100 > 5
            for: 2m
            labels:
              severity: critical
              service: fieldsync-api
            annotations:
              summary: "High error rate detected"
              description: "Error rate is {{ $value }}% for the last 5 minutes"

          - alert: HighResponseTime
            expr: histogram_quantile(0.95, rate(fieldsync_http_request_duration_seconds_bucket[5m])) > 2
            for: 5m
            labels:
              severity: warning
              service: fieldsync-api
            annotations:
              summary: "High response time detected"
              description: "95th percentile response time is {{ $value }}s"

          - alert: HighMemoryUsage
            expr: fieldsync_memory_usage_bytes{type="heap_used"} / fieldsync_memory_usage_bytes{type="heap_total"} * 100 > 80
            for: 5m
            labels:
              severity: warning
              service: fieldsync-api
            annotations:
              summary: "High memory usage detected"
              description: "Memory usage is {{ $value }}%"

          - alert: DatabaseConnectionPoolExhaustion
            expr: fieldsync_database_connection_pool_active / fieldsync_database_connection_pool_max * 100 > 90
            for: 2m
            labels:
              severity: critical
              service: database
            annotations:
              summary: "Database connection pool nearly exhausted"
              description: "Connection pool utilization is {{ $value }}%"

          - alert: RedisConnectionFailure
            expr: increase(fieldsync_cache_operations_total{status="failure"}[5m]) > 10
            for: 1m
            labels:
              severity: warning
              service: redis
            annotations:
              summary: "Redis connection failures detected"
              description: "{{ $value }} Redis failures in the last 5 minutes"

          - alert: HighFailedLogins
            expr: increase(fieldsync_user_logins_total{status="failure"}[10m]) > 50
            for: 1m
            labels:
              severity: critical
              service: security
            annotations:
              summary: "High number of failed login attempts"
              description: "{{ $value }} failed login attempts in the last 10 minutes"

          - alert: ServiceDown
            expr: up == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Service is down"
              description: "{{ $labels.job }} service is down"

      - name: system_alerts
        rules:
          - alert: NodeDiskSpaceUsage
            expr: (node_filesystem_avail_bytes * 100) / node_filesystem_size_bytes < 10
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Low disk space"
              description: "Disk space usage is above 90% on {{ $labels.instance }}"

          - alert: NodeMemoryUsage
            expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 90
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "High memory usage"
              description: "Memory usage is {{ $value }}% on {{ $labels.instance }}"

          - alert: NodeCpuUsage
            expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage"
              description: "CPU usage is {{ $value }}% on {{ $labels.instance }}"

---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: fieldsync
  labels:
    app: fieldsync
    component: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fieldsync
      component: prometheus
  template:
    metadata:
      labels:
        app: fieldsync
        component: prometheus
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        ports:
        - containerPort: 9090
          name: web
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=30d'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
          - '--query.max-concurrency=50'
          - '--query.max-samples=50000000'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 60
          periodSeconds: 30
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: fieldsync
  labels:
    app: fieldsync
    component: prometheus
spec:
  type: ClusterIP
  selector:
    app: fieldsync
    component: prometheus
  ports:
  - port: 9090
    targetPort: 9090
    name: web

---
# Prometheus PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: fieldsync
  labels:
    app: fieldsync
    component: prometheus
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
# Prometheus ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: fieldsync
  labels:
    app: fieldsync
    component: prometheus

---
# Prometheus ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app: fieldsync
    component: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
# Prometheus ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app: fieldsync
    component: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: fieldsync
roleRef:
  kind: ClusterRole
  name: prometheus
  apiGroup: rbac.authorization.k8s.io

---
# Grafana ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: fieldsync
  labels:
    app: fieldsync
    component: grafana
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    
    [grafana_net]
    url = https://grafana.net
    
    [log]
    mode = console
    level = info
    
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning

  datasource.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      version: 1
      editable: false
      jsonData:
        httpMethod: POST
        queryTimeout: 30s

  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

  fieldsync-api-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "FieldSync API Monitoring",
        "tags": ["fieldsync", "api"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(fieldsync_http_requests_total[5m])",
                "legendFormat": "{{method}} {{route}}"
              }
            ],
            "yAxes": [
              {
                "label": "Requests/sec",
                "min": 0
              }
            ],
            "xAxis": {
              "show": true
            },
            "grid": {
              "leftMax": null,
              "rightMax": null,
              "leftMin": 0,
              "rightMin": null,
              "threshold1": null,
              "threshold2": null,
              "threshold1Color": "rgba(216, 200, 27, 0.27)",
              "threshold2Color": "rgba(234, 112, 112, 0.22)"
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 0
            }
          },
          {
            "id": 2,
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(fieldsync_http_request_duration_seconds_bucket[5m]))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.50, rate(fieldsync_http_request_duration_seconds_bucket[5m]))",
                "legendFormat": "50th percentile"
              }
            ],
            "yAxes": [
              {
                "label": "Seconds",
                "min": 0
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 0
            }
          },
          {
            "id": 3,
            "title": "Error Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "(rate(fieldsync_http_requests_total{status_code=~\"5..\"}[5m]) / rate(fieldsync_http_requests_total[5m])) * 100",
                "legendFormat": "Error Rate %"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "yellow",
                      "value": 1
                    },
                    {
                      "color": "red",
                      "value": 5
                    }
                  ]
                }
              }
            },
            "gridPos": {
              "h": 4,
              "w": 6,
              "x": 0,
              "y": 8
            }
          },
          {
            "id": 4,
            "title": "Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "fieldsync_memory_usage_bytes{type=\"heap_used\"}",
                "legendFormat": "Heap Used"
              },
              {
                "expr": "fieldsync_memory_usage_bytes{type=\"heap_total\"}",
                "legendFormat": "Heap Total"
              }
            ],
            "yAxes": [
              {
                "label": "Bytes",
                "min": 0
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 6,
              "y": 8
            }
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "5s",
        "schemaVersion": 27,
        "version": 0
      }
    }

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: fieldsync
  labels:
    app: fieldsync
    component: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fieldsync
      component: grafana
  template:
    metadata:
      labels:
        app: fieldsync
        component: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - containerPort: 3000
          name: grafana
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123" # Change this in production!
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-config
          mountPath: /etc/grafana/provisioning/datasources/datasource.yaml
          subPath: datasource.yaml
        - name: grafana-config
          mountPath: /etc/grafana/provisioning/dashboards/dashboards.yaml
          subPath: dashboards.yaml
        - name: grafana-config
          mountPath: /var/lib/grafana/dashboards/fieldsync-api.json
          subPath: fieldsync-api-dashboard.json
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: fieldsync
  labels:
    app: fieldsync
    component: grafana
spec:
  type: ClusterIP
  selector:
    app: fieldsync
    component: grafana
  ports:
  - port: 3000
    targetPort: 3000
    name: grafana

---
# Grafana PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: fieldsync
  labels:
    app: fieldsync
    component: grafana
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
# AlertManager ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: fieldsync
  labels:
    app: fieldsync
    component: alertmanager
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'smtp.gmail.com:587'
      smtp_from: 'alerts@fieldsync.com'
      smtp_auth_username: 'alerts@fieldsync.com'
      smtp_auth_password: 'your-email-password'

    route:
      group_by: ['alertname', 'severity']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'
      routes:
      - match:
          severity: critical
        receiver: 'critical-alerts'
      - match:
          service: fieldsync-api
        receiver: 'api-alerts'
      - match:
          service: security
        receiver: 'security-alerts'

    receivers:
    - name: 'web.hook'
      webhook_configs:
      - url: 'http://fieldsync-backend:3000/api/alerts/webhook'

    - name: 'critical-alerts'
      email_configs:
      - to: 'admin@fieldsync.com'
        subject: 'CRITICAL: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          {{ end }}
      slack_configs:
      - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
        channel: '#alerts'
        title: 'CRITICAL Alert'
        text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'

    - name: 'api-alerts'
      email_configs:
      - to: 'dev-team@fieldsync.com'
        subject: 'API Alert: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          {{ end }}

    - name: 'security-alerts'
      email_configs:
      - to: 'security@fieldsync.com'
        subject: 'SECURITY Alert: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          {{ end }}
      pagerduty_configs:
      - routing_key: 'your-pagerduty-integration-key'
        description: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'

---
# AlertManager Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: fieldsync
  labels:
    app: fieldsync
    component: alertmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fieldsync
      component: alertmanager
  template:
    metadata:
      labels:
        app: fieldsync
        component: alertmanager
    spec:
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.25.0
        ports:
        - containerPort: 9093
          name: alertmanager
        args:
          - '--config.file=/etc/alertmanager/alertmanager.yml'
          - '--storage.path=/alertmanager'
          - '--web.external-url=http://localhost:9093'
        volumeMounts:
        - name: alertmanager-config
          mountPath: /etc/alertmanager/
        - name: alertmanager-storage
          mountPath: /alertmanager
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9093
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9093
          initialDelaySeconds: 60
          periodSeconds: 30
      volumes:
      - name: alertmanager-config
        configMap:
          name: alertmanager-config
      - name: alertmanager-storage
        persistentVolumeClaim:
          claimName: alertmanager-storage

---
# AlertManager Service
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: fieldsync
  labels:
    app: fieldsync
    component: alertmanager
spec:
  type: ClusterIP
  selector:
    app: fieldsync
    component: alertmanager
  ports:
  - port: 9093
    targetPort: 9093
    name: alertmanager

---
# AlertManager PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alertmanager-storage
  namespace: fieldsync
  labels:
    app: fieldsync
    component: alertmanager
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd